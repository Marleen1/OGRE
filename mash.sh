#!/bin/bash 
set -o nounset                           
help()
{
    cat <<- EOF
    Desc: This program is to merge similar clusters into bigger clusters.
    Usage: sh mash.sh <fastq> <cluster_file> <threads> <outdir> <maxsize>
    Author: Xiao Luo

Parameters:
    fastq:          the input fastq file
    cluster_file:   cluster file generated by single-linkage clustering <.json>
    threads:        number of threads
    outdir:         output dirname
    maxsize:        max cluster size after merging using mash <i.e. 17000,33000,inf>
EOF
    exit 0
}
while [ -n "$1" ]; do
    case $1 in
        -h) help;; # function help is called
        --) shift;break;; # end of options
        -*) echo "error: no such option $1."; exit 1;;
        *) break;;
esac
done

#input parameters
fastq=$1
cluster_file0=$2
threads=$3
outdir=$4

#for mash part
maxsize=$5


#1.get fastq for each cluster
mkdir -p $outdir
binpath=`dirname $0`
python $binpath/get_clusterID.py $cluster_file0 $outdir

cluster_file=$outdir/cluster2reads.json #reformated cluster file, change read ID "RL|S1|R8445" to "R8445"

lines=`cat $outdir/cluster.id|wc -l`
let line_perfile=lines/$threads
split -l $line_perfile -d $outdir/cluster.id $outdir/subcluster 

for subfile in $outdir/subcluster*
do
    i=`echo $subfile|sed 's/.*subcluster//g'`
    echo python $binpath/get_fastq_for_cluster.py $fastq $cluster_file  $subfile  true $i $outdir
done >$outdir/run_split_fq.sh

#submit jobs
cat $outdir/run_split_fq.sh|xargs -i -P $threads sh -c "{}" 

echo 'splitting fastq files done...'

#2.run mash


for i in $outdir/fastq_*;do export ii=$i;ls $i|sed 's/\///'|perl -ne 'chomp;print "$ENV{ii}/$_/$_.fq\n";';done >$outdir/fq.list

mash sketch -p $threads -l $outdir/fq.list -o $outdir/sketch.out

echo "skethc finished..."

#remove p value=1 because the outfile is too big
mash dist -p $threads $outdir/sketch.out.msh $outdir/sketch.out.msh |perl -ne 'my@a=split; next if $a[0] eq $a[1];next if $a[3]==1;$a[0]=~s/\S+\///;$a[0]=~s/\.fq$//;$a[1]=~s/\S+\///;$a[1]=~s/\.fq$//;my$min=$a[0];my$max=$a[1];if($a[0]>$a[1]){$min=$a[1];$max=$a[0];} print "$min\t$max\t$a[2]\t$a[3]\n";' > $outdir/dist.out

cat $outdir/dist.out |perl -ne 'BEGIN{%h;}my@a=split; my$min=$a[0];my$max=$a[1];next if exists $h{"$min:$max"};$h{"$min:$max"}=1; print "$min\t$max\t$a[2]\t$a[3]\n";'  >$outdir/distances.tab

echo "dist finished..."

rm -f $outdir/sketch.out.msh
rm -f $outdir/dist.out

cut -f 4 $outdir/distances.tab >$outdir/p.txt

Rscript $binpath/padj.R $outdir/p.txt $outdir/padj.txt 
echo "p value adjusting finished..."

paste $outdir/distances.tab $outdir/padj.txt >$outdir/distances.padj.tab

rm -f $outdir/distances.tab $outdir/p.txt $outdir/padj.txt

#filtering

p_cutoff=0.01 #adjusted p value cutoff
cat $outdir/distances.padj.tab|awk '$5<=$0.01' |sort -gk3 >$outdir/distances.padj.tab.filter

python $binpath/merge_clusters_using_mash.py  $cluster_file   $outdir/distances.padj.tab.filter $maxsize $outdir/clusters.max$maxsize.mash.json

echo "All done..."
echo 
echo "##################################################"
echo "The merged cluster file by mash is located at:"
echo $outdir/clusters.max$maxsize.mash.json
echo "##################################################"



